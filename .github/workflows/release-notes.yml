name: Generate Consolidated Release Notes

on:
  workflow_call:

jobs:
  verify_workflow:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - id: check
        run: |
          echo "proceed=true" >> $GITHUB_OUTPUT

  calculate_diffs:
    needs: verify_workflow
    if: needs.verify_workflow.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          ### Jenkins 2.4
          - image: "2.492.3/Dockerfile"
            tag: "spryker/jenkins:2.492.3"
            platforms: "linux/amd64"
            image_type: "Jenkins"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 🔎 Find Last & Current Job IDs
        id: find_jobs
        run: |
          # Get the current combined workflow run
          CURRENT_RUN_ID=$(gh run list --workflow="Combined CI/CD, Security Scan & Release Notes" \
            --json databaseId,headSha,status \
            -q '.[] | select(
              .status == "completed" and 
              .headSha == env.GITHUB_SHA
            ) | .databaseId' \
            --limit 1)
          
          # Get the previous successful run on master
          PREVIOUS_RUN_ID=$(gh run list --workflow="Combined CI/CD, Security Scan & Release Notes" \
            --branch master \
            --json databaseId,headSha,status,conclusion \
            -q '.[] | select(
              .status == "completed" and 
              .conclusion == "success" and
              .headSha != env.GITHUB_SHA
            ) | .databaseId' \
            --limit 1)
          
          # Extract job IDs for security scans
          if [[ -n "$CURRENT_RUN_ID" ]]; then
            CURRENT_JOB_ID=$(gh api "repos/${{ github.repository }}/actions/runs/$CURRENT_RUN_ID/jobs" \
              --jq ".jobs[] | select(
                .name | contains(\"security-scan\") and 
                contains(\"${{ matrix.tag }}\")
              ) | .id")
            echo "Found current security-scan job: $CURRENT_JOB_ID"
          fi
          
          if [[ -n "$PREVIOUS_RUN_ID" ]]; then
            PREVIOUS_JOB_ID=$(gh api "repos/${{ github.repository }}/actions/runs/$PREVIOUS_RUN_ID/jobs" \
              --jq ".jobs[] | select(
                .name | contains(\"security-scan\") and 
                contains(\"${{ matrix.tag }}\")
              ) | .id")
            echo "Found previous security-scan job: $PREVIOUS_JOB_ID"
          fi
          
          # Set outputs
          echo "current_job_id=${CURRENT_JOB_ID:-}" >> $GITHUB_OUTPUT
          echo "previous_job_id=${PREVIOUS_JOB_ID:-}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}

      - name: 📥 Fetch Scan Results
        if: steps.find_jobs.outputs.current_job_id
        run: |
          # Get current scan results
          if [[ -n "${{ steps.find_jobs.outputs.current_job_id }}" ]]; then
            gh run view --job ${{ steps.find_jobs.outputs.current_job_id }} --log > current_raw.log
            # Extract JSON between markers
            awk '/Full scan details:/,/^$/' current_raw.log | tail -n +2 > current-scan.json
          fi
          
          # Get previous scan results
          if [[ -n "${{ steps.find_jobs.outputs.previous_job_id }}" ]]; then
            gh run view --job ${{ steps.find_jobs.outputs.previous_job_id }} --log > previous_raw.log
            awk '/Full scan details:/,/^$/' previous_raw.log | tail -n +2 > previous-scan.json
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Process CI Changes
        id: ci_changes
        run: |
          # Extract image changes from CI job
          CI_CHANGES=$(gh run view --job ${{ needs.ci-cd.outputs.job_id }} --log | \
            awk '/Current image report:/,/Previous image report:/' | \
            grep -v "Current image report:" | \
            grep -v "Previous image report:")
          
          echo "ci_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CI_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Compare Security Scans
        id: security_diff
        run: |
          PREVIOUS_SCAN_FILE="previous-scan.json"
          CURRENT_SCAN_FILE="current-scan.json"
          
          # Ensure files exist and are valid JSON
          for file in "$PREVIOUS_SCAN_FILE" "$CURRENT_SCAN_FILE"; do
            if [[ ! -f "$file" ]] || ! jq empty "$file" 2>/dev/null; then
              echo '{"findings":[]}' > "$file"
            fi
          done
          
          # Generate security comparison
          jq -s '
          {
            "fixed": ([.[0].findings[] | .name] - [.[1].findings[] | .name]),
            "new": ([.[1].findings[] | .name] - [.[0].findings[] | .name]),
            "unchanged": ([.[0].findings[] | .name] - ([.[0].findings[] | .name] - [.[1].findings[] | .name]))
          }' "$PREVIOUS_SCAN_FILE" "$CURRENT_SCAN_FILE" > security_changes.json
          
          # Format output for release notes
          {
            echo "### Security Changes for ${{ matrix.tag }}"
            echo "#### Fixed Vulnerabilities"
            jq -r '.fixed[]' security_changes.json | while read -r cve; do
              echo "- $cve"
            done
            echo "#### New Vulnerabilities"
            jq -r '.new[]' security_changes.json | while read -r cve; do
              echo "- $cve"
            done
          } > changes.md
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          cat changes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📤 Upload Changes
        uses: actions/upload-artifact@v4
        with:
          name: changes-${{ matrix.tag }}
          path: changes.md

  generate_notes:
    needs: calculate_diffs
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Download Changes
        uses: actions/download-artifact@v4
        with:
          path: ./changes

      - name: 📣 Get PR Info
        id: pr-info
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Generate Release Notes
        run: |
          RELEASE_DATE=$(date +'%Y%m%d')
          PUBLISH_DATE=$(date +'%Y-%m-%d')
          
          {
            echo "---"
            echo "title: Release notes ${RELEASE_DATE}.0"
            echo "last_updated: ${PUBLISH_DATE}"
            echo "publish_date: ${PUBLISH_DATE}"
            echo "---"
            echo
            echo "## Changes in this Release"
            echo
            if [[ -n "${{ steps.pr-info.outputs.body }}" ]]; then
              echo "${{ steps.pr-info.outputs.body }}"
            fi
            echo
            echo "## Security Changes"
            
            for dir in ./changes/*/; do
              cat "${dir}/changes.md"
              echo
            done
          } > release-notes.md
          
          echo "::group::📜 Release Notes Preview"
          cat release-notes.md
          echo "::endgroup::"

      - name: 💾 Store Release Notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md