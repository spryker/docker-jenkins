name: ECR vulnerability detection

on:
#   schedule:
#     - cron: '0 0 * * *'
  push:
    branches:
    #   - master
      - SC-22221

jobs:
  vulnerability-detection:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        ### Leaving only latest image. Details - https://spryker.atlassian.net/browse/SC-22221
        #   ### Jenkins 2.1
        #   - image: "2.176/Dockerfile"
        #     tag: "2.176"
        #     platforms: "linux/amd64"
        #   ### Jenkins 2.3
        #   - image: "2.305/Dockerfile"
        #     tag: "2.305"
        #     platforms: "linux/amd64"
        #   - image: "2.324/Dockerfile"
        #     tag: "2.324"
        #     platforms: "linux/amd64"
        #   ### Jenkins 2.4
        #   - image: "2.401/Dockerfile"
        #     tag: "2.401"
        #     platforms: "linux/amd64"
        #   - image: "2.442/Dockerfile"
        #     tag: "2.442"
        #     platforms: "linux/amd64"
          - image: "2.488/Dockerfile"
            tag: "2.488"
            platforms: "linux/amd64"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          push: true
          file: ${{ matrix.image }}
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPO }}:${{ matrix.tag }}-${{ github.sha }}
          platforms: ${{ matrix.platforms }}

      - name: Scan Docker image
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v2.0.0
        with:
          repository: ${{ secrets.AWS_ECR_REPO }}
          tag: ${{ join(matrix.tag) }}-${{ github.sha }}

      - name: Delete images after scan images
        run: |
          aws ecr batch-delete-image --repository-name ${{ secrets.AWS_ECR_REPO }} --image-id imageTag="${{ join(matrix.tag) }}-${{ github.sha }}"

      - run: |
          echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

    #   - name: Set Date and Time
    #     id: set-date
    #     if: github.event.schedule == '0 0 * * *'
    #     run: echo "::set-output name=current_datetime::$(date +'%Y-%m-%d %H:%M:%S')"

    #   - name: Set Color
    #     id: set-color
    #     if: github.event.schedule == '0 0 * * *'
    #     run: |
    #       if [[ "${{ true }}" ]]; then
    #         COLOR="#008000"
    #       else
    #         COLOR="#ff0000"
    #       fi
    #       echo "::set-output name=color::$COLOR"

    #   - name: Send GitHub Action trigger data to Slack workflow
    #     id: slack
    #     if: github.event.schedule == '0 0 * * *'
    #     uses: slackapi/slack-github-action@v2
    #     with:
    #       payload: |
    #         {
    #           "text": "Scanned image tag *${{ matrix.tags }}*.",
    #           "attachments": [
    #             {
    #               "pretext": "ECR vulnerability scan outputs for ${{ steps.set-date.outputs.current_datetime }}",
    #               "color": "${{ steps.set-color.outputs.color }}",
    #               "fields": [
    #                 {
    #                   "title": "Status",
    #                   "short": true,
    #                   "value": "*${{ steps.docker-scan.outputs.total }}* total vulnerabilities"
    #                 }
    #               ]
    #             }
    #           ]
    #         }
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    #       SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Fail the execution
        if: ${{ steps.docker-scan.outputs.total > 0 }}
        run: exit 1
